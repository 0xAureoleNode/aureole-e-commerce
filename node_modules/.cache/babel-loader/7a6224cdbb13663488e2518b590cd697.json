{"ast":null,"code":"// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport { getAuth, signInWithRedirect, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth'; // TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport { getFirestore, doc, getDoc, setDoc, collection, writeBatch, query, getDocs } from 'firebase/firestore'; // upload these categories from that shop data up into the collections\n// Your web app's Firebase configuration\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyALOjtn7jZIEUziIpNHxVfeOdOEoQDP3V8',\n  authDomain: 'e-commerce-db-9450a.firebaseapp.com',\n  projectId: 'e-commerce-db-9450a',\n  storageBucket: 'e-commerce-db-9450a.appspot.com',\n  messagingSenderId: '731145164187',\n  appId: '1:731145164187:web:e34c39bf7ec0e911acfd3e'\n}; // Initialize Firebase\n\nconst app = initializeApp(firebaseConfig); // Create an instance of the Google provider object - https://firebase.google.com/docs/auth/web/google-signin\n\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  // Forces account selection even when one account\n  // is available.\n  prompt: 'select_account'\n}); // Initialize Firebase Authentication\n\nexport const auth = getAuth();\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () => signInWithRedirect(auth, googleProvider); // Initialize Cloud Firestore\n\nexport const db = getFirestore();\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = collection(db, collectionKey); // init the batch and pass db\n\n  const batch = writeBatch(db);\n  objectsToAdd.forEach(object => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n  await batch.commit();\n  console.log('done');\n}; //  best isolate and minimize the impact\n\nexport const getCategoriesAndDocuments = async () => {\n  // references : A reference is a lightweight object that just points to a location in your database.\n  // create references to the categories collection\n  const collectionRef = collection(db, 'categories'); // create a query against the categories collection\n\n  const q = query(collectionRef); // Execute a query\n  // use get() to retrieve the results:\n  // getDocs() : Executes the query and returns the results as a QuerySnapshot.\n\n  const querySnapshot = await getDocs(q); // A QuerySnapshot contains the results of a query. It can contain zero or more DocumentSnapshot objects.\n  // querySnapshot.docs will give an array of all of those individual documents inside\n  // ?\n\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    // distructure off the values of the data of docSnapshot\n    const {\n      title,\n      items\n    } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, []);\n  return categoryMap;\n};\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return; // Add a new document in collection \"users\"\n\n  const userDocRef = doc(db, 'users', userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef); // check data exists\n\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutAuthUser = async () => await signOut(auth); // https://firebase.google.com/docs/auth/web/manage-users\n// Manage Users\n\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);","map":{"version":3,"names":["initializeApp","getAuth","signInWithRedirect","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","setDoc","collection","writeBatch","query","getDocs","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","app","googleProvider","setCustomParameters","prompt","auth","signInWithGooglePopup","signInWithGoogleRedirect","db","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","batch","forEach","object","docRef","title","toLowerCase","set","commit","console","log","getCategoriesAndDocuments","q","querySnapshot","categoryMap","docs","reduce","acc","docSnapshot","items","data","createUserDocumentFromAuth","userAuth","additionalInformation","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","Date","error","message","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutAuthUser","onAuthStateChangedListener","callback"],"sources":["/Users/hanziniu/aureole-e-commerce/e-commerce/src/utils/firebase/firebase.utils.js"],"sourcesContent":["// Import the functions you need from the SDKs you need\nimport { initializeApp } from 'firebase/app';\nimport {\n  getAuth,\n  signInWithRedirect,\n  signInWithPopup,\n  GoogleAuthProvider,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  onAuthStateChanged,\n} from 'firebase/auth';\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\nimport {\n  getFirestore,\n  doc,\n  getDoc,\n  setDoc,\n  collection,\n  writeBatch,\n  query,\n  getDocs,\n} from 'firebase/firestore';\n\n// upload these categories from that shop data up into the collections\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyALOjtn7jZIEUziIpNHxVfeOdOEoQDP3V8',\n  authDomain: 'e-commerce-db-9450a.firebaseapp.com',\n  projectId: 'e-commerce-db-9450a',\n  storageBucket: 'e-commerce-db-9450a.appspot.com',\n  messagingSenderId: '731145164187',\n  appId: '1:731145164187:web:e34c39bf7ec0e911acfd3e',\n};\n\n// Initialize Firebase\nconst app = initializeApp(firebaseConfig);\n\n// Create an instance of the Google provider object - https://firebase.google.com/docs/auth/web/google-signin\nconst googleProvider = new GoogleAuthProvider();\n\ngoogleProvider.setCustomParameters({\n  // Forces account selection even when one account\n  // is available.\n  prompt: 'select_account',\n});\n\n// Initialize Firebase Authentication\nexport const auth = getAuth();\n\nexport const signInWithGooglePopup = () =>\n  signInWithPopup(auth, googleProvider);\nexport const signInWithGoogleRedirect = () =>\n  signInWithRedirect(auth, googleProvider);\n\n// Initialize Cloud Firestore\nexport const db = getFirestore();\n\nexport const addCollectionAndDocuments = async (\n  collectionKey,\n  objectsToAdd\n) => {\n  const collectionRef = collection(db, collectionKey);\n\n  // init the batch and pass db\n  const batch = writeBatch(db);\n\n  objectsToAdd.forEach((object) => {\n    const docRef = doc(collectionRef, object.title.toLowerCase());\n    batch.set(docRef, object);\n  });\n\n  await batch.commit();\n  console.log('done');\n};\n\n//  best isolate and minimize the impact\nexport const getCategoriesAndDocuments = async () => {\n  // references : A reference is a lightweight object that just points to a location in your database.\n  // create references to the categories collection\n  const collectionRef = collection(db, 'categories');\n\n  // create a query against the categories collection\n  const q = query(collectionRef);\n\n  // Execute a query\n  // use get() to retrieve the results:\n  // getDocs() : Executes the query and returns the results as a QuerySnapshot.\n  const querySnapshot = await getDocs(q);\n  // A QuerySnapshot contains the results of a query. It can contain zero or more DocumentSnapshot objects.\n\n  // querySnapshot.docs will give an array of all of those individual documents inside\n  // ?\n  const categoryMap = querySnapshot.docs.reduce((acc, docSnapshot) => {\n    // distructure off the values of the data of docSnapshot\n    const { title, items } = docSnapshot.data();\n    acc[title.toLowerCase()] = items;\n    return acc;\n  }, []);\n\n  return categoryMap;\n};\n\nexport const createUserDocumentFromAuth = async (\n  userAuth,\n  additionalInformation = {}\n) => {\n  if (!userAuth) return;\n  // Add a new document in collection \"users\"\n  const userDocRef = doc(db, 'users', userAuth.uid);\n\n  const userSnapshot = await getDoc(userDocRef);\n\n  // check data exists\n  if (!userSnapshot.exists()) {\n    const { displayName, email } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation,\n      });\n    } catch (error) {\n      console.log('error creating the user', error.message);\n    }\n  }\n\n  return userDocRef;\n};\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\n\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutAuthUser = async () => await signOut(auth);\n\n// https://firebase.google.com/docs/auth/web/manage-users\n// Manage Users\nexport const onAuthStateChangedListener = (callback) =>\n  onAuthStateChanged(auth, callback);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}