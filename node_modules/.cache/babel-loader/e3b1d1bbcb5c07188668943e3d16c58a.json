{"ast":null,"code":"import _slicedToArray from\"/Users/hanziniu/aureole-e-commerce/e-commerce/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{createContext,useState,useEffect}from'react';import{onAuthStateChangedListener,createUserDocumentFromAuth}from'../../utils/firebase/firebase.utils';// as the actual value to access\nimport{jsx as _jsx}from\"react/jsx-runtime\";export var UserContext=/*#__PURE__*/createContext({setCurrentUser:function setCurrentUser(){return null;},currentUser:null});export var UserProvider=function UserProvider(_ref){var children=_ref.children;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),currentUser=_useState2[0],setCurrentUser=_useState2[1];var value={currentUser:currentUser,setCurrentUser:setCurrentUser};// only want to run this function once when component mounts\n// the moment this listener mounts it will check the authentication state automatically when initialize\nuseEffect(function(){var unsubscribe=onAuthStateChangedListener(function(user){if(user){createUserDocumentFromAuth(user);}setCurrentUser(user);});return unsubscribe;},[]);return/*#__PURE__*/_jsx(UserContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["createContext","useState","useEffect","onAuthStateChangedListener","createUserDocumentFromAuth","UserContext","setCurrentUser","currentUser","UserProvider","children","value","unsubscribe","user"],"sources":["/Users/hanziniu/aureole-e-commerce/e-commerce/src/components/contexts/user.context.jsx"],"sourcesContent":["import { createContext, useState, useEffect } from 'react';\n\nimport {\n  onAuthStateChangedListener,\n  createUserDocumentFromAuth,\n} from '../../utils/firebase/firebase.utils';\n\n// as the actual value to access\nexport const UserContext = createContext({\n  setCurrentUser: () => null,\n  currentUser: null,\n});\n\nexport const UserProvider = ({ children }) => {\n  const [currentUser, setCurrentUser] = useState(null);\n  const value = { currentUser, setCurrentUser };\n\n  // only want to run this function once when component mounts\n  // the moment this listener mounts it will check the authentication state automatically when initialize\n  useEffect(() => {\n    const unsubscribe = onAuthStateChangedListener((user) => {\n      if (user) {\n        createUserDocumentFromAuth(user);\n      }\n      setCurrentUser(user);\n    });\n    return unsubscribe;\n  }, []);\n\n  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;\n};\n"],"mappings":"mIAAA,OAASA,aAAT,CAAwBC,QAAxB,CAAkCC,SAAlC,KAAmD,OAAnD,CAEA,OACEC,0BADF,CAEEC,0BAFF,KAGO,qCAHP,CAKA;2CACA,MAAO,IAAMC,YAAW,cAAGL,aAAa,CAAC,CACvCM,cAAc,CAAE,gCAAM,KAAN,EADuB,CAEvCC,WAAW,CAAE,IAF0B,CAAD,CAAjC,CAKP,MAAO,IAAMC,aAAY,CAAG,QAAfA,aAAe,MAAkB,IAAfC,SAAe,MAAfA,QAAe,CAC5C,cAAsCR,QAAQ,CAAC,IAAD,CAA9C,wCAAOM,WAAP,eAAoBD,cAApB,eACA,GAAMI,MAAK,CAAG,CAAEH,WAAW,CAAXA,WAAF,CAAeD,cAAc,CAAdA,cAAf,CAAd,CAEA;AACA;AACAJ,SAAS,CAAC,UAAM,CACd,GAAMS,YAAW,CAAGR,0BAA0B,CAAC,SAACS,IAAD,CAAU,CACvD,GAAIA,IAAJ,CAAU,CACRR,0BAA0B,CAACQ,IAAD,CAA1B,CACD,CACDN,cAAc,CAACM,IAAD,CAAd,CACD,CAL6C,CAA9C,CAMA,MAAOD,YAAP,CACD,CARQ,CAQN,EARM,CAAT,CAUA,mBAAO,KAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAED,KAA7B,UAAqCD,QAArC,EAAP,CACD,CAjBM"},"metadata":{},"sourceType":"module"}